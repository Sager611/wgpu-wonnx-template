[package]
name = "wgpu-wonnx-template"
version = "0.1.0"
authors = ["Adrian Sager <adriansagerlaganga@gmail.com>"]
edition = "2021"

[lib]
# cdylib:   dynamic lib for WASM
# rlib:     for desktop (native)
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook", "console_log"]

[dependencies]
anyhow = "1.0"
bytemuck = { version = "1.12", features = [ "derive" ] }
cfg-if = "1"
cgmath = "0.18"

## optional egui-related crates
# egui = "0.21.0"
# egui_wgpu_backend = "0.22.0"
# egui_winit_platform = "0.18.0"

env_logger = "0.10.0"
getrandom = { version = "0.2.6", features = ["js"] }
instant = "0.1.12"
log = "0.4.17"
# async library
pollster = "0.3.0"
tobj = { version = "3.2", features = ["async"] }
winit = "0.28.2"
wgpu = "0.15.0"
#wonnx = "^0.4.0"
# support for wgpu 0.15 in `wonnx` is not merged at the moment. We need our `wgpu`
# version to match that of `wonnx`
wonnx = { git = "https://github.com/webonnx/wonnx.git", branch = "chore/wgpu-0.15" }

[dependencies.image]
version = "0.24"
default-features = false
features = ["png", "jpeg"]

[target.'cfg(target_arch = "wasm32")'.dependencies]
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

console_log = { version = "0.2", features = ["color"], optional = true }
js-sys = "0.3.57"
reqwest = { version = "0.11" }
wasm-bindgen = { version = "0.2.80", features = ["serde-serialize"] }
wasm-bindgen-console-logger = "0.1.1"
wasm-bindgen-futures = "0.4.30"
wasm-bindgen-test = "0.3.30"
serde-wasm-bindgen = "0.4"
web-sys = { version = "0.3.58", features = [
    "Document",
    "Window",
    "Element",
    "Location",
    # required imports to automatically resize the canvas container on web
    "ResizeObserver",
    "ResizeObserverSize",
    "ResizeObserverEntry",
    #
    "Navigator",
    "Node",
    "NodeList",
    "Gpu",
    "GpuAdapter",
    "GpuAddressMode",
    "GpuBindGroup",
    "GpuBindGroupDescriptor",
    "GpuBindGroupEntry",
    "GpuBindGroupLayout",
    "GpuBindGroupLayoutDescriptor",
    "GpuBindGroupLayoutEntry",
    "GpuBlendComponent",
    "GpuBlendFactor",
    "GpuBlendOperation",
    "GpuBlendState",
    "GpuBuffer",
    "GpuBufferBinding",
    "GpuBufferBindingLayout",
    "GpuBufferBindingType",
    "GpuBufferDescriptor",
    "GpuCanvasContext",
    "GpuCanvasConfiguration",
    "GpuColorDict",
    "GpuColorTargetState",
    "GpuCommandBuffer",
    "GpuCommandBufferDescriptor",
    "GpuCommandEncoder",
    "GpuCommandEncoderDescriptor",
    "GpuCompareFunction",
    "GpuCompilationInfo",
    "GpuCompilationMessage",
    "GpuCompilationMessageType",
    "GpuComputePassDescriptor",
    "GpuComputePassEncoder",
    "GpuComputePipeline",
    "GpuComputePipelineDescriptor",
    "GpuCullMode",
    "GpuDepthStencilState",
    "GpuDevice",
    "GpuDeviceDescriptor",
    "GpuDeviceLostInfo",
    "GpuDeviceLostReason",
    "GpuErrorFilter",
    "GpuExtent3dDict",
    "GpuFeatureName",
    "GpuFilterMode",
    "GpuFragmentState",
    "GpuFrontFace",
    "GpuImageCopyBuffer",
    "GpuImageCopyTexture",
    "GpuImageDataLayout",
    "GpuIndexFormat",
    "GpuLoadOp",
    "GpuMultisampleState",
    "GpuObjectDescriptorBase",
    "GpuOrigin2dDict",
    "GpuOrigin3dDict",
    "GpuOutOfMemoryError",
    "GpuPipelineDescriptorBase",
    "GpuPipelineLayout",
    "GpuPipelineLayoutDescriptor",
    "GpuPowerPreference",
    "GpuPrimitiveState",
    "GpuPrimitiveTopology",
    "GpuProgrammableStage",
    "GpuQuerySet",
    "GpuQuerySetDescriptor",
    "GpuQueryType",
    "GpuQueue",
    "GpuRenderBundle",
    "GpuRenderBundleDescriptor",
    "GpuRenderBundleEncoder",
    "GpuRenderBundleEncoderDescriptor",
    "GpuRenderPassColorAttachment",
    "GpuRenderPassDepthStencilAttachment",
    "GpuRenderPassDescriptor",
    "GpuRenderPassEncoder",
    "GpuRenderPipeline",
    "GpuRenderPipelineDescriptor",
    "GpuRequestAdapterOptions",
    "GpuSampler",
    "GpuSamplerBindingLayout",
    "GpuSamplerBindingType",
    "GpuSamplerDescriptor",
    "GpuShaderModule",
    "GpuShaderModuleDescriptor",
    "GpuStencilFaceState",
    "GpuStencilOperation",
    "GpuStorageTextureAccess",
    "GpuStorageTextureBindingLayout",
    "GpuStoreOp",
    "GpuSupportedFeatures",
    "GpuSupportedLimits",
    "GpuTexture",
    "GpuTextureAspect",
    "GpuTextureBindingLayout",
    "GpuTextureDescriptor",
    "GpuTextureDimension",
    "GpuTextureFormat",
    "GpuTextureSampleType",
    "GpuTextureView",
    "GpuTextureViewDescriptor",
    "GpuTextureViewDimension",
    "GpuUncapturedErrorEvent",
    "GpuUncapturedErrorEventInit",
    "GpuValidationError",
    "GpuVertexAttribute",
    "GpuVertexBufferLayout",
    "GpuVertexFormat",
    "GpuVertexState",
    "GpuVertexStepMode",
    "HtmlCanvasElement",
    "OffscreenCanvas",
]}

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
wee_alloc = { version = "0.4.5", optional = true }

# WebGL does not support compute shaders so we have to only support WebGPU
#wgpu = { version = "0.15", features = ["webgl"] }

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[build-dependencies]
anyhow = "1.0"
fs_extra = "1.2"
glob = "0.3"

[profile.release]
# Tell `rustc` to optimize for small code size
opt-level = "s"
# Link Time Optimization for smaller code size on large projects
lto = true
